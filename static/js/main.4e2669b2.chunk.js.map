{"version":3,"sources":["utils/formats.ts","components/ArticleMeta.tsx","components/ArticleMeta.module.css","components/BlogIndexPage.module.css","components/LoadingIndicator.module.css","components/BlogLayout.module.css","components/ArticleSummary.tsx","components/ArticleSummary.module.css","components/Bio.module.css","components/BlogPostLayout.module.css","siteMetadata.ts","components/Bio.tsx","utils/getGravatarURL.ts","components/Pagination.tsx","components/BlogIndexPage.tsx","components/NotFoundPage.tsx","components/LoadingIndicator.tsx","components/BlogLayout.tsx","components/BlogPostLayout.tsx","routes/posts/index.ts","routes/index.tsx","serviceWorker.ts","index.tsx","components/Pagination.module.css"],"names":["months","ArticleMeta","_ref","readingTimeElement","blogRoot","data","readingTime","minutes","Math","max","round","cups","react_default","a","createElement","Fragment","className","styles","Array","fill","join","dateTime","date","toUTCString","dateString","Date","monthName","getMonth","dayOfMonth","getDate","fourDigitYear","getFullYear","concat","formatDate","tags","length","map","tag","key","es","href","module","exports","title","articlesList","footer","LoadingIndicator","active","LoadingIndicator-animation","container","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_navi__WEBPACK_IMPORTED_MODULE_1__","_ArticleMeta__WEBPACK_IMPORTED_MODULE_2__","_ArticleSummary_module_css__WEBPACK_IMPORTED_MODULE_3__","_ArticleSummary_module_css__WEBPACK_IMPORTED_MODULE_3___default","ArticleSummary","route","url","spoiler","Bio","header","bio","links","next","content","siteMetadata","author","description","indexPageSize","props","photoURL","email","size","_ref$defaultURL","defaultURL","hash","md5","toLowerCase","trim","encodeURIComponent","getGravatarURL","src","alt","Pagination","pageCount","pageNumber","dist_es","previous","String","pages","current","count","BlogIndexPage","postRoutes","components_Bio","components_Pagination","target","style","float","NotFoundPage","NotFound","BlogLayout","isViewingIndex","loadingRoute","components_LoadingIndicator","render","components_NotFoundPage","BlogPostLayout","_useCurrentRoute","useCurrentRoute","_ref2","MDXComponent","pathname","dist","components","Link","wrapper","_ref3","children","previousDetails","nextDetails","postModules","./2019-01-05-welcome/post.ts","e","then","bind","importPost","postPathnames","Object","keys","datePattern","postDetails","slug","slugify","replace","dateMatch","match","parseInt","posts","sortBy","reverse","i","getPage","Navi","asyncToGenerator","regenerator_default","mark","_callee2","post","getContent","meta","previousSlug","previousPost","nextSlug","nextPost","previousPostDetails","nextPostDetails","wrap","_context2","prev","sent","default","objectWithoutProperties","abrupt","getData","req","context","objectSpread","getView","_getView","_callee","_ref4","other","_context","stop","apply","this","arguments","chunks","chunk","chunkPagePairs","pageTitle","Promise","all","router","resolve","method","_x3","components_BlogIndexPage","_x","_x2","pagesSwitch","compose","withContext","mountpath","withView","path","test","components_BlogLayout","mount","/","shift","/page","/1","redirect","fromPairs","/posts","components_BlogPostLayout","/tags","lazy","/about","/rss","resolveSiteMap","Boolean","window","location","hostname","register","routes","main","_main","navigation","steady","process","renderer","ReactDOM","hydrate","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4e2669b2.chunk.js","sourcesContent":["export let months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n\nexport function formatDate(dateString) {\n  let date = new Date(dateString)\n  let monthName = months[date.getMonth()]\n  let dayOfMonth = date.getDate()\n  let fourDigitYear = date.getFullYear()\n\n  return `${monthName} ${dayOfMonth}, ${fourDigitYear}`\n}","import { join } from 'path'\nimport React from 'react'\nimport { Link } from 'react-navi'\nimport { formatDate } from '../utils/formats'\nimport styles from './ArticleMeta.module.css'\n\ninterface ArticleMetaProps {\n  blogRoot: string\n  data: any\n  readingTime?: any\n}\n\nfunction ArticleMeta({ blogRoot, data, readingTime }: ArticleMetaProps) {\n  let readingTimeElement\n  if (readingTime) {\n    let minutes = Math.max(Math.round(readingTime.minutes), 1)\n    let cups = Math.round(minutes / 5)\n    readingTimeElement = (\n      <React.Fragment>\n        {' '}\n        &bull;{' '}\n        <span className={styles.readingTime}>\n          {new Array(cups || 1).fill('☕️').join('')} {minutes} min read\n        </span>\n      </React.Fragment>\n    )\n  }\n\n  return (\n    <small className={styles.ArticleMeta}>\n      <time dateTime={data.date.toUTCString()}>{formatDate(data.date)}</time>\n      {data.tags && data.tags.length && (\n        <>\n          {' '}\n          &bull;{' '}\n          <ul className={styles.tags}>\n            {data.tags.map(tag => (\n              <li key={tag}>\n                <Link href={join(blogRoot, 'tags', tag)}>{tag}</Link>\n              </li>\n            ))}\n          </ul>\n        </>\n      )}\n      {readingTimeElement || null}\n    </small>\n  )\n}\n\nexport default ArticleMeta\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tags\":\"ArticleMeta_tags__291AC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"BlogIndexPage_title__3k5vs\",\"articlesList\":\"BlogIndexPage_articlesList__3OE5N\",\"footer\":\"BlogIndexPage_footer__37kOX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LoadingIndicator\":\"LoadingIndicator_LoadingIndicator__2VEHF\",\"active\":\"LoadingIndicator_active__2VzOO\",\"LoadingIndicator-animation\":\"LoadingIndicator_LoadingIndicator-animation__22X_P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"BlogLayout_container__35KQk\",\"title\":\"BlogLayout_title__3HvFH\"};","import { Route } from 'navi'\nimport React from 'react'\nimport { Link } from 'react-navi'\nimport ArticleMeta from './ArticleMeta'\nimport styles from './ArticleSummary.module.css'\n\ninterface ArticleSummaryProps {\n  blogRoot: string\n  route: Route\n}\n\nfunction ArticleSummary({ blogRoot, route }: ArticleSummaryProps) {\n  return (\n    <article className={styles.ArticleSummary}>\n      <h2>\n        <Link href={route.url.href}>{route.title}</Link>\n      </h2>\n      <ArticleMeta blogRoot={blogRoot} data={route.data} />\n      <p>{route.data.spoiler}</p>\n    </article>\n  )\n}\n\nexport default ArticleSummary\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ArticleSummary\":\"ArticleSummary_ArticleSummary__2oGil\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Bio\":\"Bio_Bio__2aGYj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"BlogPostLayout_title__3AVns\",\"header\":\"BlogPostLayout_header__36kb6\",\"footer\":\"BlogPostLayout_footer__qMhE1\",\"bio\":\"BlogPostLayout_bio__247vJ\",\"links\":\"BlogPostLayout_links__13ECx\",\"next\":\"BlogPostLayout_next__28OBh\",\"content\":\"BlogPostLayout_content__1gigh\"};","export default {\n  // The blog's title as it appears in the layout header, and in the document\n  // <title> tag.\n  title: 'npx create-react-blog',\n\n  author: 'James K Nelson',\n  description:\n    \"A clone of Dan Abramov's overreacted.io using create-react-app-mdx and Navi\",\n\n  // The number of posts to a page on the site index.\n  indexPageSize: 10,\n}\n","import React from 'react'\nimport styles from './Bio.module.css'\nimport { getGravatarURL } from '../utils/getGravatarURL'\n\ninterface BioProps {\n  className?: string\n}\n\nfunction Bio(props: BioProps) {\n  let photoURL = getGravatarURL({\n    email: \"test1@example.com\",\n    size: 56,\n  })\n\n  return (\n    <div\n      className={`\n      ${styles.Bio}\n      ${props.className || ''}\n    `}>\n      <img src={photoURL} alt=\"Me\" />\n      <p>\n        Create a blog with a single command, by{' '}\n        <a href=\"https://twitter.com/james_k_nelson/\">James K Nelson</a>.\n        <br />\n        Themed after Gatsby's blog starter and Dan Abramov's{' '}\n        <a href=\"https://overreacted.io/\">overreacted.io</a>.<br />\n        Based on{' '}\n        <a href=\"https://facebook.github.io/create-react-app/\">\n          create-react-app\n        </a>\n        , <a href=\"https://mdxjs.com/\">MDX</a>, and{' '}\n        <a href=\"https://frontarm.com/navi/\">Navi</a>.\n      </p>\n    </div>\n  )\n}\n\nexport default Bio\n","import md5 from 'blueimp-md5'\n\ninterface GravatarOptions {\n  email: string,\n  size: number,\n  defaultURL?: string,\n}\n\nexport function getGravatarURL({ email, size, defaultURL = 'identicon' }: GravatarOptions) {\n  let hash = md5(email.toLowerCase().trim())\n  return `https://www.gravatar.com/avatar/${hash}.jpg?s=${size}&d=${encodeURIComponent(defaultURL)}`\n}\n","import { join } from 'path'\nimport React from 'react'\nimport { Link } from 'react-navi'\nimport styles from './Pagination.module.css'\n\ninterface PaginationProps {\n  blogRoot: string\n  pageCount: number\n  pageNumber: number\n}\n\nfunction Pagination({ blogRoot, pageCount, pageNumber }: PaginationProps) {\n  return (\n    <small className={styles.Pagination}>\n      {pageNumber !== 1 && (\n        <Link\n          className={styles.previous}\n          href={join(blogRoot, 'page', String(pageNumber - 1))}>\n          ← Previous\n        </Link>\n      )}\n      <span className={styles.pages}>\n        {' '}\n        Page <span className={styles.current}>{pageNumber}</span>/\n        <span className={styles.count}>{pageCount}</span>{' '}\n      </span>\n      {pageNumber < pageCount && (\n        <Link\n          className={styles.next}\n          href={join(blogRoot, 'page', String(pageNumber + 1))}>\n          Next →\n        </Link>\n      )}\n    </small>\n  )\n}\n\nexport default Pagination\n","import { Route } from 'navi'\nimport React from 'react'\nimport { Link } from 'react-navi'\nimport siteMetadata from '../siteMetadata'\nimport ArticleSummary from './ArticleSummary'\nimport Bio from './Bio'\nimport Pagination from './Pagination'\nimport styles from './BlogIndexPage.module.css'\n\ninterface BlogIndexPageProps {\n  blogRoot: string\n  pageCount: number\n  pageNumber: number\n  postRoutes: Route[]\n}\n\nfunction BlogIndexPage({\n  blogRoot: blogRoot,\n  pageCount,\n  pageNumber,\n  postRoutes,\n}: BlogIndexPageProps) {\n  return (\n    <div>\n      <header>\n        <h1 className={styles.title}>\n          <Link href={blogRoot}>{siteMetadata.title}</Link>\n        </h1>\n        <Bio />\n      </header>\n      <ul className={styles.articlesList}>\n        {postRoutes.map(route => (\n          <li key={route.url.href}>\n            <ArticleSummary blogRoot={blogRoot} route={route} />\n          </li>\n        ))}\n      </ul>\n      {pageCount > 1 && (\n        <Pagination\n          blogRoot={blogRoot}\n          pageCount={pageCount}\n          pageNumber={pageNumber}\n        />\n      )}\n      <footer className={styles.footer}>\n        <div>\n          <a href=\"./rss.xml\" target=\"_blank\" style={{ float: 'right' }}>\n            RSS\n          </a>\n          <Link href=\"./about\">About</Link> &bull;{' '}\n          <Link href=\"./tags\">Tags</Link> &bull;{' '}\n          <a href=\"https://github.com/frontarm/create-react-blog\">\n            Source\n          </a>\n        </div>\n      </footer>\n    </div>\n  )\n}\n\nexport default BlogIndexPage\n","import React from 'react'\nimport styles from './NotFoundPage.module.css'\n\n// Note that create-react-navi-app will always show an error screen when this\n// is rendered. This is because the underlying react-scripts package shows\n// the error screen when a NotFoundError is thrown, even though it's caught\n// by <NotFoundBoundary>. To see the error rendered by this function,\n// you'll just need to close the error overlay with the \"x\" at the top right.\nfunction NotFoundPage() {\n  return (\n    <div className={styles.NotFound}>\n      <h1>404 - Not Found</h1>\n    </div>\n  )\n}\n\nexport default NotFoundPage\n","import React from 'react'\nimport styles from './LoadingIndicator.module.css'\n\ninterface LoadingIndicatorProps {\n  active?: boolean\n  className?: string\n  style?: React.CSSProperties\n}\n\nfunction LoadingIndicator({ active, className, style }: LoadingIndicatorProps) {\n  return (\n    <div\n      className={`\n        ${styles.LoadingIndicator}\n        ${active ? styles.active : ''}\n        ${className}\n      `}\n      style={style}\n    />\n  )\n}\n\nexport default LoadingIndicator\n","import React from 'react'\nimport {\n  NavContent,\n  Link,\n  NavLoading,\n  NotFoundBoundary,\n} from 'react-navi'\nimport siteMetadata from '../siteMetadata'\nimport NotFoundPage from './NotFoundPage'\nimport LoadingIndicator from './LoadingIndicator'\nimport styles from './BlogLayout.module.css'\n\ninterface BlogLayoutProps {\n  blogRoot: string\n  isViewingIndex: boolean\n}\n\nfunction BlogLayout({ blogRoot, isViewingIndex }: BlogLayoutProps) {\n  return (\n    // Once hooks are released, `<NavLoading>` will be able to be replaced\n    // with the new `useLoadingRoute` hooks.\n    <NavLoading>\n      {loadingRoute => (\n        <div className={styles.container}>\n          <LoadingIndicator active={!!loadingRoute} />\n\n          {// Don't show the header on index pages, as it has a special\n          // header.\n          !isViewingIndex && (\n            <header>\n              <h3 className={styles.title}>\n                <Link href={blogRoot}>{siteMetadata.title}</Link>\n              </h3>\n            </header>\n          )}\n\n          <main>\n            <NotFoundBoundary render={() => <NotFoundPage />}>\n              <NavContent />\n            </NotFoundBoundary>\n          </main>\n        </div>\n      )}\n    </NavLoading>\n  )\n}\n\nexport default BlogLayout\n","import React from 'react'\nimport { Link, View, useCurrentRoute } from 'react-navi'\nimport { MDXProvider } from '@mdx-js/tag'\nimport siteMetadata from '../siteMetadata'\nimport ArticleMeta from './ArticleMeta'\nimport Bio from './Bio'\nimport styles from './BlogPostLayout.module.css'\n\ninterface BlogPostLayoutProps {\n  blogRoot: string\n}\n\nfunction BlogPostLayout({ blogRoot }: BlogPostLayoutProps) {\n  let { title, data, url } = useCurrentRoute()\n\n  return (\n    <View>\n      {({ MDXComponent, readingTime }) =>\n        // The content for posts is an MDX component, so we'll need\n        // to use <MDXProvider> to ensure that links are rendered\n        // with <Link>, and thus use pushState.\n        <article className={styles.container}>\n          <header className={styles.header}>\n            <h1 className={styles.title}>\n              <Link href={url.pathname}>{title}</Link>\n            </h1>\n            <ArticleMeta\n              blogRoot={blogRoot}\n              data={data}\n              readingTime={readingTime}\n            />\n          </header>\n          <MDXProvider\n            components={{\n              a: Link,\n              wrapper: ({ children }) => (\n                <div className={styles.content}>{children}</div>\n              ),\n            }}>\n            <MDXComponent />\n          </MDXProvider>\n          <footer className={styles.footer}>\n            <h3 className={styles.title}>\n              <Link href={blogRoot}>{siteMetadata.title}</Link>\n            </h3>\n            <Bio className={styles.bio} />\n            <section className={styles.links}>\n              {data.previousDetails && (\n                <Link\n                  className={styles.previous}\n                  href={data.previousDetails.href}>\n                  ← {data.previousDetails.title}\n                </Link>\n              )}\n              {data.nextDetails && (\n                <Link className={styles.next} href={data.nextDetails.href}>\n                  {data.nextDetails.title} →\n                </Link>\n              )}\n            </section>\n          </footer>\n        </article>\n      }\n    </View>\n  )\n}\n\nexport default BlogPostLayout\n","import importAll from 'import-all.macro'\nimport * as Navi from 'navi'\nimport { join } from 'path'\nimport { sortBy } from 'lodash'\nimport slugify from 'slugify'\n\ninterface Context {\n  blogRoot: string\n}\n\n// Get a list of all posts, that will not be loaded until the user\n// requests them.\nconst postModules = importAll.deferred('./**/post.ts?(x)')\nconst importPost = pathname => postModules[pathname]()\nconst postPathnames = Object.keys(postModules)\nconst datePattern = /^((\\d{1,4})-(\\d{1,4})-(\\d{1,4}))[/-]/\n\nlet postDetails = postPathnames.map(pathname => {\n  let slug = slugify(\n    pathname.replace(/post.tsx?$/, '').replace(/(\\d)\\/(\\d)/, '$1-$2'),\n  )\n    .replace(/^[-.]+|[.-]+$/g, '')\n    .replace(datePattern, '$1/')\n\n  let date\n  let dateMatch = slug.match(datePattern)\n  if (dateMatch) {\n    date = new Date(\n      parseInt(dateMatch[2], 10),\n      parseInt(dateMatch[3], 10) - 1,\n      parseInt(dateMatch[4], 10),\n    )\n  }\n\n  return {\n    slug,\n    pathname,\n    date,\n  }\n})\n\n// Sort the pages by slug (which contain the dates)\npostDetails = sortBy(postDetails, ['slug']).reverse()\n\n// Create url-friendly slugs from post pathnames, and a `getPage()` function\n// that can be used to load and return the post's Page object.\nlet posts = postDetails.map(({ slug, pathname, date }, i) => ({\n  getPage: Navi.map(async () => {\n    let { default: post } = await importPost(pathname)\n    let { title, getContent, ...meta } = post\n    let previousSlug, previousPost, nextSlug, nextPost\n\n    if (i !== 0) {\n      let previousPostDetails = postDetails[i - 1]\n      previousPost = (await importPost(previousPostDetails.pathname)).default\n      previousSlug = previousPostDetails.slug\n    }\n\n    if (i + 1 < postDetails.length) {\n      let nextPostDetails = postDetails[i + 1]\n      nextPost = (await importPost(nextPostDetails.pathname)).default\n      nextSlug = nextPostDetails.slug\n    }\n\n    return Navi.route({\n      title,\n      getData: (req, context: Context) => ({\n        date,\n        pathname,\n        slug,\n        previousDetails: previousPost && {\n          title: previousPost.title,\n          href: join(context.blogRoot, 'posts', previousSlug),\n        },\n        nextDetails: nextPost && {\n          title: nextPost.title,\n          href: join(context.blogRoot, 'posts', nextSlug),\n        },\n        ...meta,\n      }),\n      getView: async () => {\n        let { default: MDXComponent, ...other } = await getContent()\n        return { MDXComponent, ...other }\n      },\n    })\n  }),\n  slug,\n}))\n\nexport default posts\n","import { compose, lazy, map, mount, redirect, route, withContext, withView, Route } from 'navi'\nimport React from 'react'\nimport { join } from 'path'\nimport { chunk, fromPairs } from 'lodash'\nimport BlogIndexPage from '../components/BlogIndexPage'\nimport BlogLayout from '../components/BlogLayout'\nimport BlogPostLayout from '../components/BlogPostLayout'\nimport siteMetadata from '../siteMetadata'\nimport posts from './posts'\n\ninterface AppNavContext {\n  blogRoot: string\n}\n\n// Split the posts into a list of chunks of the given size, and\n// then build index pages for each chunk.\nlet chunks = chunk(posts, siteMetadata.indexPageSize)\nlet chunkPagePairs = chunks.map((chunk, i) => [\n  '/' + (i + 1),\n  map(async (req, context: AppNavContext) => {\n    // Get metadata for all pages on this page\n    let postRoutes = await Promise.all<Route>(\n      chunk.map(async post => {\n        let href = join(context.blogRoot, 'posts', post.slug)\n        return await req.router.resolve(href, {\n          // If you want to show the page content on the index page, set\n          // this to 'GET' to be able to access it.\n          method: 'HEAD',\n        })\n      }),\n    )\n\n    // Only add a page number to the page title after the first index page.\n    let pageTitle = siteMetadata.title\n    if (i > 0) {\n      pageTitle += ` – page ${i + 1}`\n    }\n\n    return route({\n      title: pageTitle,\n      getView: () => (\n        <BlogIndexPage\n          blogRoot={context.blogRoot}\n          pageNumber={i + 1}\n          pageCount={chunks.length}\n          postRoutes={postRoutes}\n        />\n      ),\n    })\n  }),\n])\n\nconst pagesSwitch = compose(\n  withContext((req): AppNavContext => ({\n    // By adding the point at which the blog was mounted to context, it\n    // makes it possible to easily scope all URLs to the blog root, thus\n    // making it possible to mount the entire route on a subdirectory.\n    blogRoot: req.mountpath || '/',\n  })),\n  withView((req, context) => {\n    // Check if the current page is an index page by comparing the remaining\n    // portion of the URL's pathname with the index page paths.\n    let isViewingIndex = req.path === '/' || /^\\/page\\/\\d+\\/$/.test(req.path)\n\n    // Wrap the current page's content with a React Context to pass global\n    // configuration to the blog's components.\n    return (\n      <BlogLayout\n        blogRoot={context.blogRoot}\n        isViewingIndex={isViewingIndex}\n      />\n    )\n  }),\n  mount({\n    // The blog's index pages go here. The first index page is mapped to the\n    // root URL, with a redirect from \"/page/1\". Subsequent index pages are\n    // mapped to \"/page/n\".\n    '/': chunkPagePairs.shift()[1],\n    '/page': mount({\n      '/1': redirect((req, context: AppNavContext) => context.blogRoot),\n      ...fromPairs(chunkPagePairs),\n    }),\n\n    // Put posts under \"/posts\", so that they can be wrapped with a\n    // \"<BlogPostLayout />\" that configures MDX and adds a post-specific layout.\n    '/posts': compose(\n      withView((req, context: AppNavContext) => <BlogPostLayout blogRoot={context.blogRoot} />),\n      mount(fromPairs(posts.map(post => ['/' + post.slug, post.getPage]))),\n    ),\n\n    // Miscellaneous pages can be added directly to the root switch.\n    '/tags': lazy(() => import('./tags')),\n    '/about': lazy(() => import('./about')),\n\n    // Only the statically built copy of the RSS feed is intended to be opened,\n    // but the content is fetched here.\n    '/rss': route({\n      getData: req => req.router.resolveSiteMap('/posts', { method: 'GET' }),\n    }),\n  }),\n)\n\nexport default pagesSwitch\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import register from 'navi-scripts/register'\nimport * as Navi from 'navi'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { NaviProvider, View } from 'react-navi'\nimport './index.module.css'\nimport routes from './routes'\nimport * as serviceWorker from './serviceWorker'\n\n// `register()` is responsible for exporting your app's pages and App\n// component to the static renderer, and for starting the app with the\n// `main()` function when running within a browser.\nregister({\n  // Specify the pages that navi-app should statically build, by passing in a\n  // Switch object.\n  routes,\n\n  // This will only be called when loading your app in the browser. It won't\n  // be called when performing static generation.\n  async main() {\n    let navigation = Navi.createBrowserNavigation({ routes })\n\n    // Wait until the navigation has loaded the page's content, or failed to do\n    // so. If you want to load other data in parallel while the initial page is\n    // loading, make sure to start loading before this line.\n    await navigation.steady()\n\n    // React requires that you call `ReactDOM.hydrate` if there is statically\n    // rendered content in the root element, but prefers us to call\n    // `ReactDOM.render` when it is empty.\n    let hasStaticContent = process.env.NODE_ENV === 'production'\n    let renderer = hasStaticContent ? ReactDOM.hydrate : ReactDOM.render\n\n    // Start react, passing in the current navigation state via the\n    // NaviProvider.\n    renderer(\n      <NaviProvider navigation={navigation}>\n        <View />\n      </NaviProvider>,\n      document.getElementById('root')\n    )\n\n    // If you want your app to work offline and load faster, you can change\n    // unregister() to register() below. Note this comes with some pitfalls.\n    // Learn more about service workers: http://bit.ly/CRA-PWA\n    serviceWorker.unregister()\n  },\n})\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Pagination\":\"Pagination_Pagination__2BVnu\",\"previous\":\"Pagination_previous__3qr_f\",\"next\":\"Pagination_next__2NXAp\"};"],"sourceRoot":""}