{"version":3,"sources":["components/TagIndexPage.module.css","components/TagPage.module.css","components/TagIndexPage.tsx","components/TagPage.tsx","utils/getTagsFromSiteMap.ts","routes/tags.tsx"],"names":["module","exports","TagIndexPage","TagPage","_ref","tags","react_default","a","createElement","className","styles","map","tag","key","href","dist_es","name","count","blogRoot","routes","route","url","ArticleSummary","getTagsFromSiteMap","siteMap","Object","values","Array","from","Set","concat","apply","data","tagRoutes","compose","withContext","req","context","objectSpread","tagsRoot","mountpath","mount","/","title","getView","_getView","asyncToGenerator","regenerator_default","mark","_callee","tagsPathname","wrap","_context","prev","next","replace","router","resolveSiteMap","predicate","segment","pathname","indexOf","sent","fromPairs","toLowerCase","forEach","push","abrupt","components_TagIndexPage","join","length","stop","_x","this","arguments","/:tag","getTitle","params","_getView2","_callee2","lowerCaseTag","_context2","find","metaTag","components_TagPage","_x2","_x3"],"mappings":"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","file":"static/js/1.871397b8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"TagIndexPage\":\"TagIndexPage_TagIndexPage__3MWyB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TagPage\":\"TagPage_TagPage__21HFr\"};","import React from 'react'\nimport { Link } from 'react-navi'\nimport styles from './TagIndexPage.module.css'\n\ninterface Tag {\n  count: number\n  href: string\n  name: string\n}\n\ninterface TagIndexPage {\n  tags: Tag[]\n}\n\nfunction TagIndexPage({ tags }: TagIndexPage) {\n  return (\n    <div className={styles.TagIndexPage}>\n      <h1>Tags</h1>\n      <ul>\n        {tags.map(tag => (\n          <li key={tag.href}>\n            <Link href={tag.href}>\n              {tag.name} ({tag.count})\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n\nexport default TagIndexPage\n","import React from 'react'\nimport ArticleSummary from './ArticleSummary'\nimport styles from './TagPage.module.css'\nimport { Route } from 'navi'\n\ninterface TagPageProps {\n  blogRoot: string\n  name: string\n  routes: Route[]\n}\n\nfunction TagPage({ blogRoot, name, routes }: TagPageProps) {\n  return (\n    <div className={styles.TagPage}>\n      <h1>{name} posts</h1>\n      <ul>\n        {routes.map(route => (\n          <li key={route.url.href}>\n            <ArticleSummary blogRoot={blogRoot} route={route} />\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n\nexport default TagPage\n","import { SiteMap } from 'navi'\n\n/**\n * Returns an object mapping the URL of each of the site's pages to it's `title`\n * and `meta` objects.\n *\n * This object can be computed at runtime given a `router`, or read from a\n * global `pageDetailsMap` object. This allows for access to the page map during\n * development, while also allowing production builds to use a prebuilt copy.\n */\nfunction getTagsFromSiteMap(siteMap: SiteMap): string[] {\n  let routes = Object.values(siteMap.routes)\n  return Array.from(\n    new Set(\n      [].concat.apply(\n        [],\n        routes.map(route => (route.data && route.data.tags) || []),\n      ),\n    ),\n  )\n}\n\nexport default getTagsFromSiteMap\n","import React from 'react'\nimport { compose, mount, route, withContext, Route } from 'navi'\nimport { join } from 'path'\nimport { fromPairs } from 'lodash'\nimport TagIndexPage from '../components/TagIndexPage'\nimport TagPage from '../components/TagPage'\nimport getTagsFromSiteMap from '../utils/getTagsFromSiteMap'\n\ninterface TagsNavContext {\n  blogRoot: string\n  tagsRoot: string\n}\n\nconst tagRoutes = compose(\n  withContext((req, context): TagsNavContext => ({\n    ...context,\n    tagsRoot: req.mountpath,\n  })),\n  mount({\n    '/': route({\n      title: 'Tags',\n\n      getView: async req => {\n        // Build a list of pages for each tag\n        let tagsPathname = req.mountpath.replace(/\\/$/, '')\n        let siteMap = await req.router.resolveSiteMap('/', {\n          predicate: segment =>\n            segment.url.pathname.indexOf(tagsPathname) === -1,\n        })\n        let tags = getTagsFromSiteMap(siteMap)\n        let tagRoutes = fromPairs(tags.map(name => [name.toLowerCase(), []]))\n        Object.values(siteMap.routes).forEach((route: Route) => {\n          let data = route.data\n          if (data && data.tags) {\n            data.tags.forEach(tag => {\n              tag = tag.toLowerCase()\n              if (tagRoutes[tag]) {\n                tagRoutes[tag].push(route)\n              }\n            })\n          }\n        })\n\n        return (\n          <TagIndexPage\n            tags={tags.map(name => ({\n              name,\n              href: join(req.mountpath, name.toLowerCase()),\n              count: (tagRoutes[name] || []).length,\n            }))}\n          />\n        )\n      },\n    }),\n\n    '/:tag': route({\n      getTitle: req => req.params.tag,\n      getView: async (req, context: TagsNavContext) => {\n        let lowerCaseTag = req.params.tag.toLowerCase()\n\n        // Build a list of pages that include the tag from the site map\n        let siteMap = await req.router.resolveSiteMap(context.blogRoot, {\n          predicate: segment =>\n            segment.url.pathname.indexOf(context.tagsRoot) === -1,\n        })\n        let routes = [] as Route[]\n        Object.values(siteMap.routes).forEach((route: Route) => {\n          let tags = (route.data && route.data.tags) || []\n          if (tags.find(metaTag => metaTag.toLowerCase() === lowerCaseTag)) {\n            routes.push(route)\n          }\n        })\n\n        return (\n          <TagPage\n            blogRoot={context.blogRoot}\n            name={req.params.tag}\n            routes={routes}\n          />\n        )\n      },\n    }),\n  })\n)\n\nexport default tagRoutes\n"],"sourceRoot":""}